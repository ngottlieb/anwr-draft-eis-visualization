{"version":3,"sources":["components/Statistics.js","components/InfoPanel.js","components/MainMap.js","App.js","serviceWorker.js","index.js"],"names":["Statistics","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","designations","designation","data","current","currentAlternative","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","features","Symbol","iterator","next","done","feature","value","properties","err","return","Math","trunc","toLocaleString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this2","designationsListEntries","keys","map","d","react_default","a","createElement","Fragment","key","prettyName","total","className","totalForSale","Component","alternatives","InfoPanel","control_default","position","Form","Control","as","defaultValue","onChange","event","changeAlternative","target","alt","components_Statistics","OG-NoSale","color","OG-NSO","OG-CSU","OG-TL","OG-SaleSTC","MainMap","zoom","featureStyle","bind","assertThisInitialized","styles","fillOpacity","fillColor","programArea","GeoJSON","style","baseMapStyle","filter","showFeature","filterUpdateKey","Map","center","id","TileLayer","url","accessToken","mapboxToken","attribution","components_InfoPanel","background","App","loadProgramArea","loadAlternatives","triggerFilterUpdate","setState","newAlt","fetch","response","json","c","default","console","log","_context","t0","altsData","resp1","resp2","resp3","resp4","_context2","src_components_MainMap","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6d77f6e.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Statistics extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      designations: this.props.designations || []\n    };\n  }\n\n  total(designation) {\n    if (!this.props.data) {\n      return 0;\n    }\n    const current = this.props.data[this.props.currentAlternative];\n    var result = 0;\n    for (const feature of current.features) {\n      if (feature.properties.designation === designation) {\n        result += feature.properties[\"GIS_Acres\"];\n      }\n    }\n    return Math.trunc(result).toLocaleString();\n  }\n\n  totalForSale() {\n    if (!this.props.data) {\n      return 0;\n    }\n    const current = this.props.data[this.props.currentAlternative];\n    var result = 0;\n    for (const feature of current.features) {\n      if (feature.properties.designation !== \"OG-NoSale\") {\n        result += feature.properties[\"GIS_Acres\"]\n      }\n    }\n    return Math.trunc(result).toLocaleString();\n  }\n\n  render() {\n    const designationsListEntries = Object.keys(this.state.designations).map((d) => (\n      <React.Fragment key={d}>\n        <dt>{this.state.designations[d].prettyName}</dt>\n        <dd>{this.total(d)}</dd>\n      </React.Fragment>\n    ));\n    return (\n      <React.Fragment>\n        <h4>Statistics</h4>\n        <h5>Total Acres Under Each Designation</h5>\n        <dl className=\"dl-horizontal\">\n          { designationsListEntries }\n        </dl>\n        <h5>Total Acres for Sale: {this.totalForSale()}</h5>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Statistics;\n","import React, {Component} from \"react\";\nimport Control from 'react-leaflet-control';\nimport { Form} from 'react-bootstrap';\nimport Statistics from './Statistics.js';\n\nconst alternatives = [\"Alternative B\", \"Alternative C\", \"Alternative D1\", \"Alternative D2\"];\n\nclass InfoPanel extends Component {\n  render() {\n    return (\n      <Control position=\"topright\" className=\"info\">\n        <h4>Proposed Alternative: </h4>\n        <Form.Control as=\"select\" defaultValue={this.props.currentAlternative} onChange={(event) => { this.props.changeAlternative(event.target.value); }}>\n          { alternatives.map((alt) => (<option key={alt}>{alt}</option>)) }\n        </Form.Control>\n        <hr />\n        <Statistics currentAlternative={this.props.currentAlternative} designations={this.props.designations} data={this.props.data} />\n      </Control>\n    );\n  }\n}\n\nexport default InfoPanel;\n","import React, {Component} from \"react\";\nimport {Map, TileLayer, GeoJSON} from \"react-leaflet\";\nimport Control from \"react-leaflet-control\";\nimport InfoPanel from \"./InfoPanel.js\";\nimport \"./MainMap.css\";\n\nconst designations = {\n  \"OG-NoSale\": {\n    prettyName: \"Not For Sale\",\n    color: \"#7fc97f\"\n  },\n  \"OG-NSO\": {\n    prettyName: \"No Surface Occupancy\",\n    color: \"#beaed4\"\n  },\n  \"OG-CSU\": {\n    prettyName: \"Controlled Surface Use\",\n    color: \"#fdc086\"\n  },\n  \"OG-TL\": {\n    prettyName: \"Timing Limitations\",\n    color: \"#ffff99\"\n  },\n  \"OG-SaleSTC\": {\n    prettyName: \"Standard Terms and Conditions\",\n    color: \"#f0027f\"\n  }\n};\n\nclass MainMap extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      position: [69.78, -143.55],\n      zoom: 8,\n    };\n\n    this.featureStyle = this.featureStyle.bind(this);\n  }\n\n  featureStyle(feature) {\n    var styles = {\n      fillOpacity: \"0.3\",\n      color: \"rgb(49, 130, 189)\",\n    };\n    var color = designations[feature.properties.designation].color;\n    styles.fillColor = color;\n    return styles;\n  }\n\n  baseMapStyle(feature) {\n    return {\n      color: \"rgb(49, 130, 189)\",\n      fillColor: null,\n      fillOpacity: 0,\n    };\n  }\n\n  render() {\n    var programArea;\n    if (this.props.programArea) {\n      programArea = (\n        <GeoJSON data={this.props.programArea} style={this.baseMapStyle} />\n      );\n    }\n\n    var alternatives;\n    if (this.props.currentAlternative && this.props.data) {\n      alternatives = (\n        <GeoJSON\n          data={this.props.data[this.props.currentAlternative]}\n          filter={this.showFeature}\n          key={this.props.filterUpdateKey}\n          style={this.featureStyle}\n        />\n      );\n    }\n\n    return (\n      <Map center={this.state.position} zoom={this.state.zoom} id=\"mapid\">\n        <TileLayer\n          url=\"https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}\"\n          accessToken={mapboxToken}\n          attribution=\"data from <a href='https://eplanning.blm.gov/epl-front-office/eplanning/planAndProjectSite.do?methodName=dispatchToPatternPage&currentPageId=152115'>Alaska BLM</a> \"\n          id=\"mapbox.outdoors\"\n        />\n        {programArea}\n        {alternatives}\n        <InfoPanel\n          currentAlternative={this.props.currentAlternative}\n          changeAlternative={this.props.changeAlternative}\n          data={this.props.data}\n          designations={designations}\n        />\n        <Control position=\"bottomright\" className=\"info legend\">\n          {Object.keys(designations).map(d => (\n            <React.Fragment key={d}>\n              <i style={{background: designations[d].color}} />\n              {designations[d].prettyName}\n              <br />\n            </React.Fragment>\n          ))}\n        </Control>\n      </Map>\n    );\n  }\n}\n\nexport default MainMap;\n\nconst mapboxToken = 'pk.eyJ1IjoibmdvdHRsaWViIiwiYSI6ImNqcm1yZjk3ZDBtY3M0M3RrY2k0N3RjMDcifQ.onvCNE2GGEo63j53moDLMw';\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport MainMap from \"./components/MainMap.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      programArea: null,\n      data: null,\n      currentAlternative: \"Alternative B\",\n      filterUpdateKey: 0\n    };\n    this.loadProgramArea();\n    this.loadAlternatives();\n    this.triggerFilterUpdate = this.triggerFilterUpdate.bind(this);\n    this.changeAlternative = this.changeAlternative.bind(this);\n  }\n\n  triggerFilterUpdate() {\n    this.setState({\n      filterUpdateKey: this.state.filterUpdateKey + 1\n    });\n  }\n\n  changeAlternative(newAlt) {\n    this.setState({\n      currentAlternative: newAlt,\n      filterUpdateKey: this.state.filterUpdateKey + 1\n    });\n  }\n\n  async loadProgramArea() {\n    try {\n      const response = await fetch(\"./data/CoastalPlain_ProgramArea.json\");\n      const c = await response.json();\n      this.setState({\n        programArea: c.default,\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  async loadAlternatives() {\n    try {\n      var altsData = {};\n      var resp1 = await fetch(\"./data/alternative_b.json\");\n      altsData[\"Alternative B\"] = await resp1.json();\n      var resp2 = await fetch(\"./data/alternative_c.json\");\n      altsData[\"Alternative C\"] = await resp2.json();\n      var resp3 = await fetch(\"./data/alternative_d1.json\");\n      altsData[\"Alternative D1\"] = await resp3.json();\n      var resp4 = await fetch(\"./data/alternative_d2.json\");\n      altsData[\"Alternative D2\"] = await resp4.json();\n      this.setState({\n        data: altsData\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainMap\n          programArea={this.state.programArea}\n          data={this.state.data}\n          currentAlternative={this.state.currentAlternative}\n          filterUpdateKey={this.state.filterUpdateKey}\n          changeAlternative={this.changeAlternative}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}